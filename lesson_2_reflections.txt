What happens when you initialize a repository? Why do you need to do it?

	It starts creating the structure to get track of version control, that is, it creates an empty repository. You need to issue command git init from the directory where the contents of the repository are



How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is what git takes care of, while in the working directory you can have any other file but they are not kept track of
	It allows you to have content in the working area you don't need to track as it is not changing and it reduces the burden of git as making it take care only of the files that require version control

	git diff (no arguments) compares working directory with staging area
	git diff --staged compares staging area with latest commit
	git diff commit 1 commit2 compares two commits



How can you use the staging area to make sure you have one commit per logical
change?

	You can check the difference between the staging area and the last commit to make sure there is only one logical change.
	In case there is more, you can go back to working directory, create one version with only one logical change, add it to the staging area and commit.



What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are useful any time you need to keep parallel tracks of the sw with some common trunk but test them independently



How do the diagrams help you visualize the branch structure?

	Branches are much more clearly visualized in a diagram where you can see the node where the branches are created, you can see the reachability path for each branch...




What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	When you merge two branches together, there is a single branch from that point on, but the head can reach the commits from both branches. You don't need the label of the branch anymore as now there is only one. 



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	If there is not any conflict doing automatic merges saves a lot of time. Manual merging is the only way out when there is a conflict. So both mechanisms are useful and complement each other perfectly.
	